diff --git a/extension/httpfs/s3fs.cpp b/extension/httpfs/s3fs.cpp
index bdc03ec10b..96e110c1e1 100644
--- a/extension/httpfs/s3fs.cpp
+++ b/extension/httpfs/s3fs.cpp
@@ -205,7 +205,7 @@ unique_ptr<S3AuthParams> S3AuthParams::ReadFromStoredCredentials(optional_ptr<Fi
 
 	// Return the stored credentials
 	const auto &secret = secret_match.GetSecret();
-	const auto &kv_secret = dynamic_cast<const KeyValueSecret &>(secret);
+	const auto &kv_secret = checked_dynamic_cast<const KeyValueSecret &>(secret);
 
 	return make_uniq<S3AuthParams>(S3SecretHelper::GetParams(kv_secret));
 }
diff --git a/src/include/duckdb/common/exception.hpp b/src/include/duckdb/common/exception.hpp
index 3765c6ba58..6b6d599f51 100644
--- a/src/include/duckdb/common/exception.hpp
+++ b/src/include/duckdb/common/exception.hpp
@@ -16,6 +16,7 @@
 
 #include <vector>
 #include <stdexcept>
+#include <iostream>
 
 namespace duckdb {
 enum class PhysicalType : uint8_t;
@@ -362,4 +363,14 @@ public:
 	DUCKDB_API explicit ParameterNotResolvedException();
 };
 
+	template <typename A, typename B>
+	A&& checked_dynamic_cast (B&& target) {
+		std::cout << "checked_dynamic_cast between " << typeid(A).name() << "\tand " << typeid(B).name() << "\n";
+		if (dynamic_cast<typename std::remove_reference<A>::type*>(&target)) {
+			return dynamic_cast<A&>(target);
+		}
+		std::cout << "checked_dynamic_cast between " << typeid(A).name() << "\tand " << typeid(B).name() << " ERRORRED\n";
+		throw FatalException("Failed checked_dynamic_cast");
+	}
+
 } // namespace duckdb
diff --git a/src/planner/operator/logical_delete.cpp b/src/planner/operator/logical_delete.cpp
index a028a1ea6f..d9322a4ac7 100644
--- a/src/planner/operator/logical_delete.cpp
+++ b/src/planner/operator/logical_delete.cpp
@@ -14,7 +14,7 @@ LogicalDelete::LogicalDelete(TableCatalogEntry &table, idx_t table_index)
 LogicalDelete::LogicalDelete(ClientContext &context, const unique_ptr<CreateInfo> &table_info)
     : LogicalOperator(LogicalOperatorType::LOGICAL_DELETE),
       table(Catalog::GetEntry<TableCatalogEntry>(context, table_info->catalog, table_info->schema,
-                                                 dynamic_cast<CreateTableInfo &>(*table_info).table)) {
+                                                 checked_dynamic_cast<CreateTableInfo &>(*table_info).table)) {
 }
 
 idx_t LogicalDelete::EstimateCardinality(ClientContext &context) {
diff --git a/src/planner/operator/logical_insert.cpp b/src/planner/operator/logical_insert.cpp
index 3846ed0097..830126809e 100644
--- a/src/planner/operator/logical_insert.cpp
+++ b/src/planner/operator/logical_insert.cpp
@@ -14,7 +14,7 @@ LogicalInsert::LogicalInsert(TableCatalogEntry &table, idx_t table_index)
 LogicalInsert::LogicalInsert(ClientContext &context, const unique_ptr<CreateInfo> table_info)
     : LogicalOperator(LogicalOperatorType::LOGICAL_INSERT),
       table(Catalog::GetEntry<TableCatalogEntry>(context, table_info->catalog, table_info->schema,
-                                                 dynamic_cast<CreateTableInfo &>(*table_info).table)) {
+                                                 checked_dynamic_cast<CreateTableInfo &>(*table_info).table)) {
 }
 
 idx_t LogicalInsert::EstimateCardinality(ClientContext &context) {
diff --git a/src/planner/operator/logical_update.cpp b/src/planner/operator/logical_update.cpp
index e66dd36d1a..7fe2e907e1 100644
--- a/src/planner/operator/logical_update.cpp
+++ b/src/planner/operator/logical_update.cpp
@@ -12,7 +12,7 @@ LogicalUpdate::LogicalUpdate(TableCatalogEntry &table)
 LogicalUpdate::LogicalUpdate(ClientContext &context, const unique_ptr<CreateInfo> &table_info)
     : LogicalOperator(LogicalOperatorType::LOGICAL_UPDATE),
       table(Catalog::GetEntry<TableCatalogEntry>(context, table_info->catalog, table_info->schema,
-                                                 dynamic_cast<CreateTableInfo &>(*table_info).table)) {
+                                                 checked_dynamic_cast<CreateTableInfo &>(*table_info).table)) {
 }
 
 idx_t LogicalUpdate::EstimateCardinality(ClientContext &context) {
diff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp
index 574fc0660d..30f124df0b 100644
--- a/src/storage/checkpoint_manager.cpp
+++ b/src/storage/checkpoint_manager.cpp
@@ -583,8 +583,8 @@ void CheckpointReader::ReadTableData(ClientContext &context, Deserializer &deser
 	}
 
 	// FIXME: icky downcast to get the underlying MetadataReader
-	auto &binary_deserializer = dynamic_cast<BinaryDeserializer &>(deserializer);
-	auto &reader = dynamic_cast<MetadataReader &>(binary_deserializer.GetStream());
+	auto &binary_deserializer = checked_dynamic_cast<BinaryDeserializer &>(deserializer);
+	auto &reader = checked_dynamic_cast<MetadataReader &>(binary_deserializer.GetStream());
 
 	MetadataReader table_data_reader(reader.GetMetadataManager(), table_pointer);
 	TableDataReader data_reader(table_data_reader, bound_info);
